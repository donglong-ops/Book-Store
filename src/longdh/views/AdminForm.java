/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package longdh.views;

import java.time.LocalDate;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import longdh.dtos.BookDTO;
import longdh.dtos.UserDTO;
import longdh.models.AdminDAO;
import longdh.models.UserDAO;

/**
 *
 * @author donglong
 */
public class AdminForm extends javax.swing.JFrame {

    DefaultTableModel tblViewBook = null;
    AdminDAO adminDAO = new AdminDAO();
    UserDAO userDAO = new UserDAO();

    public AdminForm() {
        initComponents();
        showDataAdmin();
    }

    public AdminForm(String username) {
        initComponents();
        lblWelcome.setText("Welcome Admin, " + username.toUpperCase());
        showDataAdmin();
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        txtDate.setEditable(false);

    }

    public void showDataAdmin() {
        List<BookDTO> listBook = adminDAO.getBook();
        tblViewBook = (DefaultTableModel) tblBook.getModel();
        while (tblViewBook.getRowCount() > 0) {
            tblViewBook.removeRow(0);
        }
        for (BookDTO bookDTO : listBook) {
            tblViewBook.addRow(bookDTO.toVector());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcome = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBook = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtBookID = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtBookTitle = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        txtQuantity = new javax.swing.JTextField();
        txtAuthor = new javax.swing.JTextField();
        txtDate = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtImage = new javax.swing.JTextField();
        cbxCategory = new javax.swing.JComboBox();
        btnInsert = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnLogOut = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtSearchByName = new javax.swing.JTextField();
        btnSearchByName = new javax.swing.JButton();
        btnSearchByMoney = new javax.swing.JButton();
        btnSearchByCategory = new javax.swing.JButton();
        btnCreatDiscountCode = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        cbxSearchCategory = new javax.swing.JComboBox();
        cbxRangeMoney = new javax.swing.JComboBox();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblWelcome.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblWelcome.setForeground(new java.awt.Color(204, 0, 0));
        lblWelcome.setText("Welcome");

        tblBook.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "BookID", "Book Title", "Author", "Price", "Quantity"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblBook.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblBookMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblBook);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Detail"));

        jLabel1.setText("BookID");

        jLabel2.setText("BookTitle");

        txtBookID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookIDKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBookIDKeyReleased(evt);
            }
        });

        jLabel3.setText("Price");

        jLabel4.setText("Quantity");

        jLabel5.setText("Author");

        jLabel6.setText("Categories");

        jLabel7.setText("DateImport");

        txtBookTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtBookTitleKeyReleased(evt);
            }
        });

        txtPrice.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPriceKeyReleased(evt);
            }
        });

        txtQuantity.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtQuantityKeyReleased(evt);
            }
        });

        txtAuthor.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtAuthorKeyReleased(evt);
            }
        });

        txtDate.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDateKeyReleased(evt);
            }
        });

        jLabel8.setText("ImageName");

        txtImage.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtImageKeyReleased(evt);
            }
        });

        cbxCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choice One Category", "Politics - law", "Art science", "Economics", "Socio-cultural", "Literature", "Education", "Psychological, religious", "Learning", "LoveStory", "Travel", "Experience", "LifeStory" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(txtPrice)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtBookID, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                            .addComponent(txtBookTitle)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel6))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDate, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
                                    .addComponent(txtImage)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(57, 57, 57)
                                .addComponent(cbxCategory, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(30, 30, 30))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtBookTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(txtAuthor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cbxCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(txtDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnInsert.setText("Insert");
        btnInsert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnLogOut.setText("LogOut");
        btnLogOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogOutActionPerformed(evt);
            }
        });

        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtSearchByName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchByNameKeyReleased(evt);
            }
        });

        btnSearchByName.setText("Search Name");
        btnSearchByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByNameActionPerformed(evt);
            }
        });

        btnSearchByMoney.setText("Search Range Money");
        btnSearchByMoney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByMoneyActionPerformed(evt);
            }
        });

        btnSearchByCategory.setText("Search By Category");
        btnSearchByCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchByCategoryActionPerformed(evt);
            }
        });

        btnCreatDiscountCode.setText("Create Discount Code");
        btnCreatDiscountCode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatDiscountCodeActionPerformed(evt);
            }
        });

        jButton1.setText("Create Account");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbxSearchCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choice  Category", "Politics - law", "Art science", "Economics", "Socio-cultural", "Literature", "Education", "Psychological, religious", "Learning", "LoveStory", "Travel", "Experience", "LifeStory" }));
        cbxSearchCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSearchCategoryActionPerformed(evt);
            }
        });

        cbxRangeMoney.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Choice Range Money", "<= 50k   VND", "<= 150k  VND", "<= 250k  VND", "<= 300k  VND", "<= 400k  VND", "<= 500k  VND" }));

        jButton2.setText("Check");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnInsert, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnCreatDiscountCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(cbxSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSearchByCategory)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxRangeMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnSearchByMoney))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSearchByName)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton2))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(136, 136, 136)
                        .addComponent(btnLogOut)))
                .addGap(33, 33, 33))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLogOut)
                    .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByName)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxSearchCategory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByCategory)
                    .addComponent(cbxRangeMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchByMoney))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnClear)
                        .addGap(18, 18, 18)
                        .addComponent(btnInsert)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)
                        .addGap(18, 18, 18)
                        .addComponent(btnCreatDiscountCode)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addGap(25, 25, 25))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogOutActionPerformed
        // TODO add your handling code here:
        int r = JOptionPane.showConfirmDialog(this, "Are you sure to LogOut ?", "LogOut ?", JOptionPane.YES_NO_OPTION);
        if (r == JOptionPane.YES_OPTION) {
            new LoginForm().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnLogOutActionPerformed

    private void tblBookMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblBookMouseClicked
        // TODO add your handling code here:
        
        int row = tblBook.getSelectedRow();
        if (row < 0) {
            return;
        }
        String BookID = (String) tblBook.getValueAt(row, 0);
        BookDTO dto = null;
        try {
            dto = adminDAO.getBookByID(BookID);
        } catch (Exception ex) {
            Logger.getLogger(UserDTO.class.getName()).log(Level.SEVERE, null, ex);
        }

        txtBookID.setText(dto.getBookId());
        txtBookTitle.setText(dto.getBookTitle());
        txtPrice.setText(Double.toString(dto.getPrice()));
        txtQuantity.setText(dto.getQuantity());
        txtAuthor.setText(dto.getAuthor());
        String category = dto.getCategories();
        for (int i = 0; i < cbxCategory.getItemCount(); i++) {
            String cbValue = (String) cbxCategory.getItemAt(i);
            if (cbValue.equals(category)) {
                cbxCategory.setSelectedIndex(i);
            }
        }

        txtDate.setText(dto.getDate());
        txtImage.setText(dto.getImageName());
        btnUpdate.setEnabled(true);
        btnDelete.setEnabled(true);
    }//GEN-LAST:event_tblBookMouseClicked

    private void btnInsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertActionPerformed
        // TODO add your handling code here:

        String bookId = txtBookID.getText();
        if (!bookId.matches("[A-Za-z0-9]{1,10}")) {
            JOptionPane.showMessageDialog(null, "BookID has Max Length 10 !!!");
            return;
        }
        try {
            if (adminDAO.getBookByID(bookId) != null) {
                JOptionPane.showMessageDialog(this, "BookID is Duplicated!");
                return;
            }
        } catch (Exception ex) {
            Logger.getLogger(AdminForm.class.getName()).log(Level.SEVERE, null, ex);
        }

        String bookTitle = txtBookTitle.getText();
        if (!bookTitle.matches("[A-Za-z0-9 _]{1,50}")) {
            JOptionPane.showMessageDialog(null, "Book Title has Max Length 30 !!!");
            return;
        }
        String price = txtPrice.getText();
        if (!price.matches("[0-9.,]{1,30}")) {
            JOptionPane.showMessageDialog(null, "Price are number great than 0 and  Max Length 30 !!!");
            return;
        }
        float prices = Float.parseFloat(price);

        String category = null;
        int selectPersent = cbxCategory.getSelectedIndex();
        switch (selectPersent) {
            case 1:
                category = "Politics - law";
                break;
            case 2:
                category = "Art science";
                break;
            case 3:
                category = "Economics";
                break;
            case 4:
                category = "Socio-cultural";
                break;
            case 5:
                category = "Literature";
                break;
            case 6:
                category = "Education";
                break;
            case 7:
                category = "Psychological, religious";
                break;
            case 8:
                category = "Learning";
                break;
            case 9:
                category = "LoveStory";
                break;
            case 10:
                category = "Travel";
                break;
            case 11:
                category = "Experience";
                break;
            case 12:
                category = "LifeStory";
                break;
        }

        String quantity = txtQuantity.getText();
        if (!quantity.matches("[0-9]{1,300}")) {
            JOptionPane.showMessageDialog(null, "Quantity must a number(Begin 1) and Max Length 300 !!!");
            return;
        }
        String author = txtAuthor.getText();
        if (!author.matches("[A-Za-z _0-9]{1,50}")) {
            JOptionPane.showMessageDialog(null, "Author has Max Length 50 !!!");
            return;
        }

        String imagename = txtImage.getText();
        if (!imagename.matches("[A-Za-z0-9.]{1,20}")) {
            JOptionPane.showMessageDialog(null, "Image has default like long.img, hoa.jpn.. and max length 20 !!!");
            return;
        }

        LocalDate date = java.time.LocalDate.now();
        String dateAdd = date.toString();
        txtDate.setEditable(false);

        BookDTO book = new BookDTO(bookId, bookTitle, quantity, author, category, imagename, dateAdd, "active", prices);
        int n = JOptionPane.showConfirmDialog(this, "Do you want to Insert Book ?", "Insert", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = adminDAO.insertBook(book);
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (check) {
            JOptionPane.showMessageDialog(this, "Insert Book Success");
            clear();
        } else {
            JOptionPane.showMessageDialog(this, "Insert Book Failed");
        }
        showDataAdmin();
        tblBook.updateUI();

    }//GEN-LAST:event_btnInsertActionPerformed

    public void fullField() {
        if (!txtBookID.getText().isEmpty() && !txtBookTitle.getText().isEmpty() && !txtPrice.getText().isEmpty() && !txtAuthor.getText().isEmpty()
                && !txtQuantity.getText().isEmpty() && !txtDate.getText().isEmpty() && !txtImage.getText().isEmpty()
                || !txtSearchByName.getText().isEmpty()) {
            btnInsert.setEnabled(true);
            btnSearchByCategory.setEnabled(true);
        }
    }

    public void clear() {
        txtBookID.setText("");
        txtBookTitle.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        txtAuthor.setText("");
        txtDate.setText("");
        txtImage.setText("");
        btnInsert.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }
    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        txtBookID.setText("");
        txtBookTitle.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        txtAuthor.setText("");
        txtDate.setText("");
        txtImage.setText("");
        btnInsert.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
        txtSearchByName.setText("");
        showDataAdmin();

    }//GEN-LAST:event_btnClearActionPerformed

    private void txtBookIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyPressed
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtBookIDKeyPressed

    private void txtBookIDKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtBookIDKeyReleased

    private void txtBookTitleKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookTitleKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtBookTitleKeyReleased

    private void txtPriceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPriceKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtPriceKeyReleased

    private void txtQuantityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtQuantityKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtQuantityKeyReleased

    private void txtAuthorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAuthorKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtAuthorKeyReleased

    private void txtDateKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDateKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtDateKeyReleased

    private void txtImageKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtImageKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtImageKeyReleased

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        String bookId = txtBookID.getText();
        String bookTitle = txtBookTitle.getText();
        int n = JOptionPane.showConfirmDialog(this, "Do you want to delete Book-" + bookTitle + "?", "Delete", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        String price = txtPrice.getText();
        float prices = Float.parseFloat(price);
        String quantity = txtQuantity.getText();
        String author = txtAuthor.getText();
        String imagename = txtImage.getText();
        String date = txtDate.getText();

        BookDTO book = new BookDTO(bookId, bookTitle, quantity, author, imagename, date, "active", prices);
        boolean check = false;
        try {
            check = adminDAO.deleteBook(book);
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (check) {
            JOptionPane.showMessageDialog(this, "Delete Book Success");
            clear();
        } else {
            JOptionPane.showMessageDialog(this, "Delete Book Failed");
        }
        showDataAdmin();
        tblBook.updateUI();

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String bookId = txtBookID.getText();
        txtBookID.setEditable(false);

        String bookTitle = txtBookTitle.getText();
        if (!bookTitle.matches("[A-Za-z0-9 _]{1,50}")) {
            JOptionPane.showMessageDialog(null, "Book Title has Max Length 30 !!!");
            return;
        }
        String price = txtPrice.getText();
        if (!price.matches("[0-9.,]{1,30}")) {
            JOptionPane.showMessageDialog(null, "Price are number and  Max Length 30 !!!");
            return;
        }
        float prices = Float.parseFloat(price);

        String category = null;
        int selectPersent = cbxCategory.getSelectedIndex();
        switch (selectPersent) {
            case 1:
                category = "Politics - law";
                break;
            case 2:
                category = "Art science";
                break;
            case 3:
                category = "Economics";
                break;
            case 4:
                category = "Socio-cultural";
                break;
            case 5:
                category = "Literature";
                break;
            case 6:
                category = "Education";
                break;
            case 7:
                category = "Psychological, religious";
                break;
            case 8:
                category = "Learning";
                break;
            case 9:
                category = "LoveStory";
                break;
            case 10:
                category = "Travel";
                break;
            case 11:
                category = "Experience";
                break;
            case 12:
                category = "LifeStory";
                break;
        }

        String quantity = txtQuantity.getText();
        if (!quantity.matches("[0-9]{1,100}")) {
            JOptionPane.showMessageDialog(null, "Quantity must a number and Max Length 100 !!!");
            return;
        }
        String author = txtAuthor.getText();
        if (!author.matches("[A-Za-z _]{1,50}")) {
            JOptionPane.showMessageDialog(null, "Author has Max Length 50 !!!");
            return;
        }

        String imagename = txtImage.getText();
        if (!imagename.matches("[A-Za-z0-9.]{1,20}")) {
            JOptionPane.showMessageDialog(null, "Image has default like long.img, hoa.jpn.. and max length 20 !!!");
            return;
        }

        String date = txtDate.getText();
        if (!date.matches("[0-9-/|]{4,15}")) {
            JOptionPane.showMessageDialog(null, "Date default like 1999-02-28!!! and max length 15");
            return;
        }
        BookDTO book = new BookDTO(bookId, bookTitle, quantity, author, category, imagename, date, "active", prices);
        int n = JOptionPane.showConfirmDialog(this, "Do you want to Update Book - " + bookTitle + " ?", "Update", JOptionPane.YES_NO_OPTION);
        if (n != JOptionPane.YES_OPTION) {
            return;
        }
        boolean check = false;
        try {
            check = adminDAO.updateBook(book);
        } catch (Exception ex) {
            Logger.getLogger(UserForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (check) {
            JOptionPane.showMessageDialog(this, "Update Book Success");
            clear();
        } else {
            JOptionPane.showMessageDialog(this, "Update Book Failed");
        }
        showDataAdmin();
        tblBook.updateUI();

    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnSearchByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByNameActionPerformed
        // TODO add your handling code here:
        String search = txtSearchByName.getText().trim();
        if (!search.matches("[A-Za-z, ]{1,30}")) {
            JOptionPane.showMessageDialog(null, "Please Inter Name Of Book and Max Length 30 !!!");
            return;
        }
        DefaultTableModel model = (DefaultTableModel) tblBook.getModel();
        List<BookDTO> listBookFindByName = null;
        try {
            listBookFindByName = adminDAO.getBookByName(search);
        } catch (Exception ex) {
            Logger.getLogger(UserDTO.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (BookDTO dto : listBookFindByName) {
            model.addRow(dto.toVector());
        }
        tblBook.updateUI();
    }//GEN-LAST:event_btnSearchByNameActionPerformed

    private void btnSearchByMoneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByMoneyActionPerformed

        String rangeMoney = null;
        int selectPersent = cbxRangeMoney.getSelectedIndex();
        switch (selectPersent) {
            case 1:
                rangeMoney = "50000";
                break;
            case 2:
                rangeMoney = "150000";
                break;
            case 3:
                rangeMoney = "250000";
                break;
            case 4:
                rangeMoney = "300000";
                break;
            case 5:
                rangeMoney = "400000";
                break;
            case 6:
                rangeMoney = "500000";
                break;
        }
        DefaultTableModel model = (DefaultTableModel) tblBook.getModel();
        List<BookDTO> listBookFindByMoney = null;
        try {
            listBookFindByMoney = adminDAO.getBookByMoney(rangeMoney);
        } catch (Exception ex) {
            Logger.getLogger(UserDTO.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (BookDTO dto : listBookFindByMoney) {
            model.addRow(dto.toVector());
        }
        tblBook.updateUI();
    }//GEN-LAST:event_btnSearchByMoneyActionPerformed

    private void btnSearchByCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchByCategoryActionPerformed

        String category = null;
        int selectPersent = cbxSearchCategory.getSelectedIndex();
        switch (selectPersent) {
            case 1:
                category = "Politics - law";
                break;
            case 2:
                category = "Art science";
                break;
            case 3:
                category = "Economics";
                break;
            case 4:
                category = "Socio-cultural";
                break;
            case 5:
                category = "Literature";
                break;
            case 6:
                category = "Education";
                break;
            case 7:
                category = "Psychological, religious";
                break;
            case 8:
                category = "Learning";
                break;
            case 9:
                category = "LoveStory";
                break;
            case 10:
                category = "Travel";
                break;
            case 11:
                category = "Experience";
                break;
            case 12:
                category = "LifeStory";
                break;
        }
        DefaultTableModel model = (DefaultTableModel) tblBook.getModel();
        List<BookDTO> listBookFindByCategory = null;
        try {
            listBookFindByCategory = adminDAO.getBookByCategory(category);
        } catch (Exception ex) {
            Logger.getLogger(UserDTO.class.getName()).log(Level.SEVERE, null, ex);
        }
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        for (BookDTO dto : listBookFindByCategory) {
            model.addRow(dto.toVector());
        }
        tblBook.updateUI();
    }//GEN-LAST:event_btnSearchByCategoryActionPerformed

    private void txtSearchByNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchByNameKeyReleased
        // TODO add your handling code here:
        fullField();
    }//GEN-LAST:event_txtSearchByNameKeyReleased

    private void btnCreatDiscountCodeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatDiscountCodeActionPerformed
        // TODO add your handling code here:
        new DiscountForm().setVisible(true);
//        setLocation(500, 300);
    }//GEN-LAST:event_btnCreatDiscountCodeActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        new CreateAccountForm().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cbxSearchCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSearchCategoryActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSearchCategoryActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String date = txtSearchByName.getText().trim();

        List<BookDTO> listBook = adminDAO.getBookNotBuy(date);
        tblViewBook = (DefaultTableModel) tblBook.getModel();
        while (tblViewBook.getRowCount() > 0) {
            tblViewBook.removeRow(0);
        }
        for (BookDTO bookDTO : listBook) {
            tblViewBook.addRow(bookDTO.toVector());
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreatDiscountCode;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnInsert;
    private javax.swing.JButton btnLogOut;
    private javax.swing.JButton btnSearchByCategory;
    private javax.swing.JButton btnSearchByMoney;
    private javax.swing.JButton btnSearchByName;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox cbxCategory;
    private javax.swing.JComboBox cbxRangeMoney;
    private javax.swing.JComboBox cbxSearchCategory;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblWelcome;
    private javax.swing.JTable tblBook;
    private javax.swing.JTextField txtAuthor;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtBookTitle;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtImage;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtSearchByName;
    // End of variables declaration//GEN-END:variables
}
